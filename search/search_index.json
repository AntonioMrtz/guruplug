{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GuruPlug","text":""},{"location":"Boot-Debian-net-install/","title":"Boot Debian net install","text":"<p>Boot net installer for Debian</p> <pre><code>fatload usb 0:1 0x00800000 /uImage; \nfatload usb 0:1 0x01100000 /uInitrd; \nsetenv bootargs console=ttyS0,115200n8 base-installer/initramfs-tools/driver-policy=most; \nbootm 0x00800000 0x01100000\n</code></pre>"},{"location":"Boot-from-USB/","title":"Boot from USB","text":"<pre><code>setenv bootargs_console console=ttyS0,115200;\nsetenv bootcmd_usb 'usb start; ext2load usb 0:1 0x00800000 /uImage; ext2load usb 0:1 0x01100000 /uInitrd'\nsetenv bootcmd 'setenv bootargs ${bootargs_console}; run bootcmd_usb; bootm 0x00800000 0x01100000'\nsaveenv\n</code></pre>"},{"location":"Boot-process/","title":"Boot Process","text":"<ol> <li>Hardware setup when device is turned on.</li> <li>U-Boot runs from NAND memory.</li> <li>U-Boot initializes hardware.</li> <li>U-Boot loads uImage and uInitrd. After that it passes control to the kernel.</li> <li>Kernel contained in uImage mounts the filesystem with the information contained in uInitrd. Peripherals and memory are also set up in this part of the process.</li> <li>Kernel inits the init process. It initializes the rest of the system.</li> </ol>"},{"location":"Goals/","title":"Goals","text":"<ul> <li>[x] Update OS to Debian 12</li> <li>[x] Boot from SD card or USB</li> <li>[x] Update old mirrors Debian 5</li> <li>[ ] Cross platform compilation for ARM 32 bits armel</li> <li>[x] Little frontend for storing GuruPlug docs</li> <li>[ ] Connect to device using bluetooth</li> <li>[ ] Learn to use JTAG</li> <li>[x] Learn to set up serial console tty using JTAG</li> <li>[x] Tethering with phone</li> <li>[ ] Use as UAP</li> <li>[x] Recover from bricked state</li> <li>[x] Upgrade U-Boot</li> <li>[ ] Pihole guruplug</li> </ul>"},{"location":"Going-root/","title":"Going Root","text":"<p>There's no sudo so we have to use:</p> <pre><code>sudo -\n</code></pre>"},{"location":"Install%20OS%20on%20USB/","title":"Install OS on USB","text":"<ul> <li>Old U-Boot with GuruPlug -&gt; cant boot newer OS</li> <li>upgrade U-Boot</li> </ul>"},{"location":"Install%20OS%20on%20USB/#related-links","title":"Related links","text":"<ul> <li>https://wiki.hackzine.org/hardware/guruplug-installing-debian.html</li> <li>https://101pro.wordpress.com/2013/02/25/connect-to-guru-using-jtag/</li> </ul>"},{"location":"Learnt-concepts/","title":"Learnt Concepts","text":""},{"location":"Learnt-concepts/#u-boot-universal-boot","title":"U-Boot (Universal Boot)","text":"<p>An open-source bootloader that initializes the hardware and starts the operating system, commonly used with ARM devices. Located in the NAND memory of the GuruPlug, it can become corrupted if written to incorrectly. A bricked GuruPlug means the system cannot boot the OS or access the U-Boot shell, preventing users from interacting with the device.</p>"},{"location":"Learnt-concepts/#uimage","title":"uImage","text":"<p>Contains the kernel image compatible with the U-Boot bootloader. It has a modified header that allow U-Boot to load it into memory.</p>"},{"location":"Learnt-concepts/#uinitrd","title":"uInitrd","text":"<p>Temporary filesystem loaded in RAM for the U-Boot. Contains info for creating the real OS filesystem.</p>"},{"location":"Learnt-concepts/#nand-memory","title":"NAND Memory","text":"<p>Non-volatile storage. Information is persisted when the device is turned off. in the GuruPlug it stores critical components such as the U-Boot, uImage and uInitrd.</p>"},{"location":"Learnt-concepts/#jtag-joint-test-action-group","title":"JTAG (Joint Test Action Group)","text":"<p>Hardware interface for interacting the with board</p> <p>It can be used to:</p> <ul> <li>Debug embeded software</li> <li>Program internal memory</li> <li>Firmware updates</li> </ul>"},{"location":"Learnt-concepts/#leds","title":"Leds","text":"<ul> <li>Power: indicates wheter JTAG is connected to power.</li> <li>RX: indicates if the JTAG is reading data from the target device.</li> <li>TX: indicates if the JTAG is transmiting data to the target device.</li> </ul>"},{"location":"Learnt-concepts/#uart-universal-asynchronous-receivertransmitter","title":"UART (Universal Asynchronous Receiver/Transmitter)","text":"<p>Hardware comunication protocol that consists of two wires: one for sending and one for recieving data.</p>"},{"location":"Learnt-concepts/#terminal-emulator","title":"Terminal Emulator","text":"<p>A terminal emulator is a software application that replicates the functionality of a traditional computer terminal within a graphical environment.</p>"},{"location":"Network-issues/","title":"Network issues","text":"<p>This section covers:</p> <ul> <li>How to restart network ifaces</li> <li>How to obtain IP using dhclient</li> <li>How to set MAC address</li> <li>How to set network config on OS startup </li> </ul>"},{"location":"Network-issues/#manual-approach","title":"Manual approach","text":"<p>For doing the process manually you can simply run this script changing the network iface and the MAC Adress:</p> <pre><code>ip link set dev eth0 address 00:11:22:33:44:66\nip link set eth0 down\ndhclient eth0\nip link set eth0 up\n</code></pre> <p>This configuration is cleaned after a reboot.</p>"},{"location":"Network-issues/#automatic-approach","title":"Automatic approach","text":"<p>It will run automatically on OS startup and won't be cleaned after reboots.</p> <p>Go to <code>/etc/network/interfaces</code> and add:</p> <pre><code>auto eth0\niface eth0 inet dhcp\n    hwaddress ether 00:11:22:33:44:66  # Replace with your desired MAC address\n</code></pre> <p>This configuration will:</p> <ul> <li>Tell <code>eth0</code> iface to start automatically on boot.</li> <li>Asign a MAC adress. Can't bring <code>eth</code> iface without a MAC adress.</li> <li>Use <code>ipv4</code> and <code>dhcp</code>.</li> </ul> <p>Remove other <code>eth0</code> iface configuration found in that file.</p>"},{"location":"Partition-Memory-Layout/","title":"Partition and Memory Layout","text":""},{"location":"Partition-Memory-Layout/#memory-layout-table","title":"Memory Layout Table","text":"Offset Size MTD Name UBIFS Name Contents 0x000000000000 0x000000100000 1 MiB u-boot u-boot (env at offset 0x40000, size 0x20000) 0x000000100000 0x000000400000 4 MiB uImage Kernel image 0x000000500000 0x00001fb00000 507 MiB root Root file system Total 0x000020000000 512 MiB"},{"location":"Partition-Memory-Layout/#description-of-sections","title":"Description of Sections","text":"<ol> <li> <p>u-boot (1 MiB)     - Offset: <code>0x000000000000</code>     - Description: This is the U-Boot bootloader, with environment variables stored at offset <code>0x40000</code> and a size of <code>0x20000</code>.</p> </li> <li> <p>uImage (4 MiB)     - Offset: <code>0x000000100000</code>     - Description: The kernel image (<code>uImage</code>), used by the bootloader to boot the system.</p> </li> <li> <p>Root Filesystem (507 MiB)     - Offset: <code>0x000000500000</code>     - Description: The root filesystem, which contains the entire operating system and applications.</p> </li> </ol>"},{"location":"Partition-Memory-Layout/#total-memory-usage","title":"Total Memory Usage","text":"<ul> <li>Total Size: 512 MiB</li> </ul>"},{"location":"Power-consumption/","title":"Power Consumption","text":"Mode Power Consumption Idle, no ethernet 4.8W Idle, 1.8\u00bb USB HDD, no ethernet 5.9W CPU @ 100%, 1.8\u00bb USB HDD, no ethernet 7.0W System halted, no ethernet, 1.8\u00bb USB HDD 4.3W System halted, no ethernet, no HDD 3.2W"},{"location":"Serial-connection/","title":"Connect to serial console using UART","text":"<p>Using the JTAG provided with the GuruPlug and a terminal emulator we can connect using the UART protocol. This will allow us to interact with the GuruPlug if we don't know the state of the device or the credentials to establish a ssh connection. </p>"},{"location":"Serial-connection/#install-terminal-emulator","title":"Install terminal emulator","text":"<pre><code>sudo apt install screen\n</code></pre>"},{"location":"Serial-connection/#connect-jtag-to-guruplug","title":"Connect JTAG to GuruPlug","text":""},{"location":"Serial-connection/#list-serial-devices-connected","title":"List serial devices connected","text":"<pre><code>ls /dev/tty*\n</code></pre> <p>The output will look like something this:</p> <pre><code>...\n/dev/tty63  /dev/ttyS13  /dev/ttyS21  /dev/ttyS3   /dev/ttyUSB0\n/dev/tty15  /dev/tty23  /dev/tty31  /dev/tty4   /dev/tty48  /dev/tty56  /dev/tty7   /dev/ttyS14  /dev/ttyS22  /dev/ttyS30\n</code></pre> <p>If we have connected the GuruPlug using USB the serial device that we're searching for is <code>/dev/ttyUSBx</code>. If we're not sure about which serial device is GuruPlug we can plug and unplug to see which one disappears from the list.</p>"},{"location":"Serial-connection/#terminal-emulator-connection","title":"Terminal emulator connection","text":"<p>We select the serial device that represents our GuruPlug and the baud rate for the connection, the latter is the communication speed over serial channel.</p> <pre><code>sudo screen /dev/ttyUSB0 115200\n</code></pre>"},{"location":"Serial-connection/#connect-to-guruplug-terminal","title":"Connect to GuruPlug terminal","text":"<p>Reboot GuruPlug and then we should have the emulated terminal connected. </p> <ul> <li>Press enter for stopping autoboot.</li> <li>If enter was not pressed the boot will continue and you will get access to the Guruplay OS.</li> </ul>"},{"location":"Serial-connection/#credentials","title":"Credentials","text":"<p>Default login credentials for GuruPlug OS (Based on Debian5) are:</p> <ul> <li>User: <code>root</code></li> <li>Password: <code>nosoup4u</code></li> </ul>"},{"location":"Serial-connection/#related-links","title":"Related links","text":"<ul> <li>https://101pro.wordpress.com/2013/02/25/connect-to-guru-using-jtag/</li> </ul>"},{"location":"Tethering-USB/","title":"Tethering using USB","text":"<ul> <li>Connect phone or other device to USB port of the GuruPlug.</li> <li>If using an Android device share wifi option will be displayed once you connect it to the USB port of the Guruplug.</li> </ul>"},{"location":"Tethering-USB/#activate-the-usb-net-interface","title":"Activate the USB net interface","text":"<pre><code>ifconfig usb0 up\n</code></pre>"},{"location":"Tethering-USB/#check-interface-status","title":"Check interface status","text":"<pre><code>ifconfig usb0\n</code></pre> <p>If no ip is provided by ifconfig on that interface we can manually try to get an ip. This command request an ipv4 ip to usb0 interface:</p> <pre><code>dhclient usb0\n</code></pre>"},{"location":"Tethering-USB/#try-connection","title":"Try connection","text":"<p>Now we should have and ipv4 assigned. Ping google DNS to check the connection:</p> <pre><code>ping 8.8.8.8\n</code></pre>"},{"location":"Unbrick-bootloader/","title":"Unbrick bootloader","text":"<p>In this section, we will cover how to recover a bricked GuruPlug that cannot be accessed due to a broken U-Boot bootloader. The recovery process involves connecting via JTAG and booting the GuruPlug to load a new U-Boot bootloader using the serial port. Once the boot process is stopped, we will access the U-Boot shell.</p>"},{"location":"Unbrick-bootloader/#unbricking","title":"Unbricking","text":""},{"location":"Unbrick-bootloader/#set-up","title":"Set up","text":"<p>Download the latest U-Boot bootloader for the GuruPlug:</p> <pre><code>wget http://ftp.debian.org/debian/dists/bullseye/main/installer-armel/current/images/kirkwood/u-boot/GuruPlug/u-boot.kwb\n</code></pre> <p>We must also download the <code>kwboot</code> recovery utility. Here is how to do it in Debian systems:</p> <pre><code>sudo apt install u-boot-tools\n</code></pre>"},{"location":"Unbrick-bootloader/#loading-u-boot-from-other-device","title":"Loading U-Boot from other device","text":"<p>First, make sure all connections to the GuruPlug are closed and that the device starts from a turned-off state. Then we connect JTAG between the GuruPlug and our device. After that we run this command that loads our <code>U-Boot</code> into the GuruPlug NAND memory:</p> <pre><code>kwboot -t -B 115200 /dev/ttyUSB0 -b u-boot.kwb\n</code></pre> <ul> <li><code>-t</code>: flag that enables a terminal on the device.</li> <li><code>-B</code>: baud rate. Speed of the communication between our device and the GuruPlug.</li> <li><code>-b</code>: boot with a custom bootloader.</li> <li><code>/dev/ttyUSB0</code>: device associated with the JTAG connection. The data will be sent over this channel. <code>ls /dev/tty*</code> can be used to list which devices are connected.</li> </ul> <p>After running the command we should see something like this:</p> <pre><code>kwboot version 2024.01\nDetected kwbimage v0 with NAND boot signature\nPatching image boot signature to UART\nSending boot message. Please reboot the target...\n</code></pre> <p>The TX and RX LED lights on the JTAG should be flashing if it's connected correctly. This indicates that the device is recieving and sending data.</p> <p>Restart the GuruPlug and you will see the following:</p> <pre><code>Sending boot image...\n  0 % [......................................................................]\n 99 % [....................................]\n</code></pre> <p>When the <code>U-Boot</code> image is completely sent our GuruPlug will reboot and we should see the <code>U-Boot</code> shell.</p>"},{"location":"Unbrick-bootloader/#related-links","title":"Related links","text":"<ul> <li>https://wiki.debian.org/GuruPlugTesting</li> <li>https://gitlab.com/fosc-space/guruplug-2024</li> <li>https://oinkzwurgl.org/attic/guruplug/guruplug_uboot/</li> <li>https://groups.google.com/g/linux.debian.ports.arm/c/NBsvsnRBQp8?pli=1</li> <li>https://en.wikipedia.org/wiki/Das_U-Boot</li> <li>https://manpages.debian.org/bookworm/u-boot-tools/kwboot.1.en.html</li> <li>https://tadeubento.com/2018/sheevaplug-2018-upgrade-u-boot/</li> </ul>"},{"location":"Universal-access-point/","title":"Universal access point","text":""},{"location":"Universal-access-point/#related-links","title":"Related links","text":"<ul> <li>https://barrenfrozenwasteland.com/2010/10/guruplug-part-3/</li> <li>https://wiki.beyondlogic.org/index.php?title=GuruPlug_Libertas_SD8688</li> </ul>"},{"location":"Update-repository-sources/","title":"Update repository sources","text":"<p>The GuruPlug comes with Debian 5 installed, which reached its end of life some time ago. As a result, the repository paths have changed. When trying to update or install new software we will get errors from the default repositories. The solution is to update the sources list to point to the archived repositories.</p>"},{"location":"Update-repository-sources/#update-the-sources-to-point-to-the-archived-repositories","title":"Update the sources to point to the archived repositories","text":"<p>If we check our current sources for Debian 5 we get the following:</p> <pre><code>cat /etc/apt/sources.list\n\ndeb http://ftp.us.debian.org/debian/ lenny main contrib non-free\ndeb http://http.us.debian.org/debian stable main contrib non-free\ndeb http://security.debian.org lenny/updates main contrib non-free\ndeb http://www.backports.org/debian lenny-backports main contrib non-free\ndeb http://10.82.108.51/kedars/sheevaplug_wifi/builds/packages/ binary/\n</code></pre> <p>We should replace the repository paths with the archived ones:</p> <pre><code>deb http://archive.debian.org/debian/ lenny main contrib non-free\n</code></pre> <p>Then we can update and upgrade our distro:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre>"},{"location":"Update-repository-sources/#sources-for-debian-11","title":"Sources for Debian 11","text":"<pre><code>deb http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware\n\ndeb-src http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware\n\ndeb http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware\ndeb-src http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware\n\n# bookworm-updates, to get updates before a point release is made;\n# see https://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_updates_and_backports\ndeb http://deb.debian.org/debian/ bookworm-updates main contrib non-free non-free-firmware\ndeb-src http://deb.debian.org/debian/ bookworm-updates main contrib non-free non-free-firmware\n</code></pre>"},{"location":"Update-repository-sources/#troubleshoot","title":"Troubleshoot","text":"<p>If we get errors related to authentication and keys because of outdated credentials we can do the following:</p>"},{"location":"Update-repository-sources/#manually-add-keys","title":"Manually add keys","text":"<p>Some packages may have expired keys, which are necessary for the OS to verify their authenticity. We can manually add the missing keys to our OS keyring:</p> <pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys &lt;KEY_ID-THAT-IS-MISSING&gt;\n</code></pre>"},{"location":"Update-repository-sources/#bypass-authentication","title":"Bypass authentication","text":"<p>If we still have problems with expired GPG keys we can bypass any security with <code>--allow-unauthenticated</code> flag:</p> <pre><code>apt-get install {package} --allow-unauthenticated\n</code></pre>"},{"location":"Update-repository-sources/#related-links","title":"Related links","text":"<ul> <li>https://stackoverflow.com/questions/29070471/gpg-error-http-archive-debian-org-lenny-updates-release-the-following-signat</li> <li>https://serverfault.com/questions/337278/debian-how-can-i-securely-get-debian-archive-keyring-so-that-i-can-do-an-apt-g</li> </ul>"},{"location":"Useful-links/","title":"Useful links","text":"<ul> <li>https://wiki.beyondlogic.org/index.php?title=Special%3ASearch&amp;search=guruplug</li> <li>https://oinkzwurgl.org/attic/guruplug/</li> <li>https://gitlab.com/fosc-space/guruplug-2024</li> </ul>"},{"location":"Wifi-Bt-Drivers/","title":"Wifi and Bluethooth drivers","text":""},{"location":"Wifi-Bt-Drivers/#enabling-guruplug-server-marvell-libertas-8688-sdio-80211bg-wifi","title":"Enabling GuruPlug Server Marvell Libertas 8688 SDIO 802.11b/g WiFi","text":"<p>The GuruPlug Server Plus incorporates an AzureWave AW-GH381 IEEE 802.11 b/g Wireless LAN &amp; Bluetooth 3.0 module IC, functionally equivalent to the Marvell 88W8688 WiFi</p> <p>Enable the following as kernel modules and compile your modules:</p> <pre><code>Device Drivers &gt; Network device support &gt; Wireless LAN\n   Marvell 8xxx Libertas WLAN driver support\n   Marvell Libertas 8385/8686/8688 SDIO 802.11b/g cards\n</code></pre> <p>The modules above will want to load firmware from the root filesystem that is not available until the filesystem is mounted. This will result in an initial error loading firmware (see below), but the kernel will retry later and should succeed. To mitigate this issue, I choose to compile these as loadable modules rather than built-in.</p> <pre><code>mmc0: new high speed SDIO card at address 0001\nlibertas_sdio mmc0:0001:1: Direct firmware load failed with error -2\nlibertas_sdio mmc0:0001:1: Falling back to user helper\n</code></pre> <p>Download Binary BLOBs to /lib/firmware:</p> <pre><code>mkdir /lib/firmware\ncd /lib/firmware\nwget http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git/plain/mrvl/sd8688_helper.bin\nwget http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git/plain/mrvl/sd8688.bin\n</code></pre> <p>And reboot. The modules should now load. If not, manually load them using:</p> <pre><code>insmod /lib/modules/&lt;kernel ver&gt;/kernel/drivers/net/wireless/libertas/libertas.ko \ninsmod /lib/modules/&lt;kernel ver&gt;/kernel/drivers/net/wireless/libertas/libertas_sdio.ko \n</code></pre> <p>When loaded, the following debug messages should be displayed:</p> <pre><code>libertas_sdio mmc0:0001:1 (unregistered net_device): 00:24:23:1f:b3:e9, fw 10.38.1p25, cap 0x00000303\nlibertas_sdio mmc0:0001:1 wlan0: Marvell WLAN 802.11 adapter\n</code></pre>"},{"location":"Wifi-Bt-Drivers/#bluetooth","title":"Bluetooth","text":"<p>Enable the following Linux kernel modules and recompile your kernel. These modules will want to load firmware from the root filesystem that is not available until mounted. This will result in an initial error loading firmware, but the kernel will retry later and should succeed. To mitigate this issue, I choose to compile these as loadable modules rather than built-in.</p> <pre><code>Networking Support -&gt; Bluetooth subsystem support \nNetworking Support -&gt; Bluetooth subsystem support -&gt; Bluetooth device drivers\n    Marvell Bluetooth driver support\n    Marvell BT-over-SDIO driver\n</code></pre> <p>The WLAN/Bluetooth SoC has an ARMv5TE core that runs closed firmware. Download the Binary BLOBs (firmware) to /lib/firmware/mrvl/:</p> <pre><code>mkdir /lib/firmware /lib/firmware/mrvl \ncd /lib/firmware/mrvl \nwget http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git/plain/mrvl/sd8688_helper.bin\nwget http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git/plain/mrvl/sd8688.bin\n</code></pre> <p>Upon reboot, you should now see the following kernel message as the module loads:</p> <pre><code>Bluetooth: vendor=0x2df, device=0x9105, class=255, fn=2\n</code></pre> <p>and be greeted with a Bluetooth hci device:</p> <pre><code>$ hciconfig\nhci0:   Type: BR/EDR  Bus: SDIO\n        BD Address: 00:24:23:1F:B3:EA  ACL MTU: 1021:7  SCO MTU: 240:3\n        DOWN\n        RX bytes:647 acl:0 sco:0 events:22 errors:0\n        TX bytes:442 acl:0 sco:0 commands:22 errors:0\n\nIf this is not the case, check that the btmrvl.ko &amp; btmrvl_sdio.ko modules are loaded. \n</code></pre>"},{"location":"Wifi-Bt-Drivers/#related-links","title":"Related links","text":"<p>https://wiki.beyondlogic.org/index.php?title=GuruPlug_Libertas_SD8688</p>"}]}